{
    container: {
        register: [Function: register],
            get: [Function: get],
                extend: [Function: extend]
    },
    dirs: {
        dist: {
            root: 'D:\\strapi-demo',
                src: 'D:\\strapi-demo\\src',
                    api: 'D:\\strapi-demo\\src\\api',
                        components: 'D:\\strapi-demo\\src\\components',
                            extensions: 'D:\\strapi-demo\\src\\extensions',
                                policies: 'D:\\strapi-demo\\src\\policies',
                                    middlewares: 'D:\\strapi-demo\\src\\middlewares',
                                        config: 'D:\\strapi-demo\\config'
        },
        app: {
            root: 'D:\\strapi-demo',
                src: 'D:\\strapi-demo\\src',
                    api: 'D:\\strapi-demo\\src\\api',
                        components: 'D:\\strapi-demo\\src\\components',
                            extensions: 'D:\\strapi-demo\\src\\extensions',
                                policies: 'D:\\strapi-demo\\src\\policies',
                                    middlewares: 'D:\\strapi-demo\\src\\middlewares',
                                        config: 'D:\\strapi-demo\\config'
        },
        static: { public: 'D:\\strapi-demo\\public' }
    },
    isLoaded: true,
        reload: [Function: reload] { isWatching: [Getter / Setter], isReloading: false },
    server: {
        app: { subdomainOffset: 2, proxy: false, env: 'development' },
        router: Router { opts: { }, methods: [Array], params: { }, stack: [Array] },
        httpServer: Server {
            maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                    _events: [Object: null prototype],
                        _eventsCount: 3,
                            _maxListeners: undefined,
                                _connections: 1,
                                    _handle: [TCP],
                                        _usingWorkers: false,
                                            _workers: [],
                                                _unref: false,
                                                    allowHalfOpen: true,
                                                        pauseOnConnect: false,
                                                            noDelay: false,
                                                                keepAlive: false,
                                                                    keepAliveInitialDelay: 0,
                                                                        httpAllowHalfOpen: false,
                                                                            timeout: 0,
                                                                                keepAliveTimeout: 5000,
                                                                                    maxHeadersCount: null,
                                                                                        maxRequestsPerSocket: 0,
                                                                                            headersTimeout: 60000,
                                                                                                requestTimeout: 0,
                                                                                                    destroy: [AsyncFunction(anonymous)],
                                                                                                        _connectionKey: '4:127.0.0.1:8000',
                                                                                                            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                                                                                                [Symbol(ServerResponse)]: [Function: ServerResponse],
                                                                                                                    [Symbol(kCapture)]: false,
                                                                                                                        [Symbol(async_id_symbol)]: 628,
                                                                                                                            [Symbol(kUniqueHeaders)]: null
        },
        api: [Function: api],
            use: [Function: use],
                routes: [Function: routes],
                    mount: [Function: mount],
                        initRouting: [Function: initRouting],
                            initMiddlewares: [AsyncFunction: initMiddlewares],
                                listRoutes: [Function: listRoutes],
                                    listen: [Function: listen],
                                        destroy: [AsyncFunction: destroy]
    },
    fs: {
        writeAppFile: [Function: writeAppFile],
            writePluginFile: [Function: writePluginFile],
                removeAppFile: [Function: removeAppFile],
                    appendFile: [Function: appendFile]
    },
    eventHub: {
        emit: [AsyncFunction: emit],
            subscribe: [Function: subscribe],
                unsubscribe: [Function: unsubscribe],
                    on: [Function: on],
                        off: [Function: off],
                            once: [Function: once],
                                destroy: [Function: destroy],
                                    removeListener: [Function: off],
                                        removeAllListeners: [Function: destroy],
                                            addListener: [Function: on]
    },
    startupLogger: {
        logStats: [Function: logStats],
            logFirstStartupMessage: [Function: logFirstStartupMessage],
                logDefaultStartupMessage: [Function: logDefaultStartupMessage],
                    logStartupMessage: [Function: logStartupMessage]
    },
    log: <ref * 1 > DerivedLogger {
        _readableState: ReadableState {
            objectMode: true,
                highWaterMark: 16,
                    buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: [Console],
                    pipesCount: 1,
                        flowing: true,
                            ended: false,
                                endEmitted: false,
                                    reading: true,
                                        sync: false,
                                            needReadable: true,
                                                emittedReadable: false,
                                                    readableListening: false,
                                                        resumeScheduled: false,
                                                            paused: false,
                                                                emitClose: true,
                                                                    autoDestroy: false,
                                                                        destroyed: false,
                                                                            defaultEncoding: 'utf8',
                                                                                awaitDrain: 0,
                                                                                    readingMore: false,
                                                                                        decoder: null,
                                                                                            encoding: null
        },
        readable: true,
            _events: [Object: null prototype] {
            prefinish: [Function: prefinish],
                end: [Function],
                    data: [Function: ondata]
        },
        _eventsCount: 3,
            _maxListeners: undefined,
                _writableState: WritableState {
            objectMode: true,
                highWaterMark: 16,
                    finalCalled: false,
                        needDrain: false,
                            ending: false,
                                ended: false,
                                    finished: false,
                                        destroyed: false,
                                            decodeStrings: true,
                                                defaultEncoding: 'utf8',
                                                    length: 0,
                                                        writing: false,
                                                            corked: 0,
                                                                sync: false,
                                                                    bufferProcessing: false,
                                                                        onwrite: [Function(anonymous)],
                                                                            writecb: null,
                                                                                writelen: 0,
                                                                                    bufferedRequest: null,
                                                                                        lastBufferedRequest: null,
                                                                                            pendingcb: 0,
                                                                                                prefinished: false,
                                                                                                    errorEmitted: false,
                                                                                                        emitClose: true,
                                                                                                            autoDestroy: false,
                                                                                                                bufferedRequestCount: 0,
                                                                                                                    corkedRequestsFree: [CorkedRequest]
        },
        writable: true,
            allowHalfOpen: true,
                _transformState: {
            afterTransform: [Function: bound afterTransform],
                needTransform: true,
                    transforming: false,
                        writecb: null,
                            writechunk: null,
                                writeencoding: 'utf8'
        },
        silent: undefined,
            format: Format { options: { }, Format: [Function: Format] },
        defaultMeta: null,
            levels: {
            error: 0,
                warn: 1,
                    info: 2,
                        http: 3,
                            verbose: 4,
                                debug: 5,
                                    silly: 6
        },
        level: 'silly',
            exceptions: ExceptionHandler { logger: [Circular * 1], handlers: Map(0) { } },
        rejections: RejectionHandler { logger: [Circular * 1], handlers: Map(0) { } },
        profilers: { },
        exitOnError: true,
            [Symbol(kCapture)]: false
    },
    cron: {
        add: [Function: add],
            remove: [Function: remove],
                start: [Function: start],
                    stop: [Function: stop],
                        destroy: [Function: destroy],
                            jobs: [[Object]]
    },
    telemetry: {
        isDisabled: [Getter],
            register: [Function: register],
                bootstrap: [Function: bootstrap],
                    destroy: [Function: destroy],
                        send: [AsyncFunction: send]
    },
    requestContext: { run: [AsyncFunction: run], get: [Function: get] },
    customFields: { register: [Function: register] },
    fetch: [Function: fetch],
        admin: {
        register: [Function(anonymous)],
            bootstrap: [AsyncFunction(anonymous)],
                destroy: [AsyncFunction(anonymous)],
                    config: {
            forgotPassword: [Object],
                auth: [Object],
                    apiToken: [Object],
                        transfer: [Object]
        },
        policies: {
            isAuthenticatedAdmin: [Function(anonymous)],
                hasPermissions: [Object],
                    isTelemetryEnabled: [Object]
        },
        routes: { admin: [Object] },
        services: {
            user: [Object],
                token: [Object],
                    role: [Object],
                        permission: [Object],
                            passport: [Object],
                                metrics: [Object],
                                    'content-type': [Object],
                                        constants: [Object],
                                            condition: [Object],
                                                auth: [Object],
                                                    action: [Object],
                                                        'api-token': [Object],
                                                            transfer: [Object],
                                                                'project-settings': [Object]
        },
        controllers: {
            admin: [Object],
                'api-token': [Object],
                    'authenticated-user': [Object],
                        authentication: [Object],
                            permission: [Object],
                                role: [Object],
                                    transfer: [Object],
                                        user: [Object],
                                            webhooks: [Object],
                                                'content-api': [Object]
        },
        contentTypes: {
            permission: [Object],
                user: [Object],
                    role: [Object],
                        'api-token': [Object],
                            'api-token-permission': [Object],
                                'transfer-token': [Object],
                                    'transfer-token-permission': [Object]
        },
        middlewares: {
            rateLimit: [Function(anonymous)],
                'data-transfer': [Function(anonymous)]
        }
    },
    app: { register: [Function: register], bootstrap: [Function: bootstrap] },
    components: { },
    webhookRunner: WebhookRunner {
        eventHub: {
            emit: [AsyncFunction: emit],
                subscribe: [Function: subscribe],
                    unsubscribe: [Function: unsubscribe],
                        on: [Function: on],
                            off: [Function: off],
                                once: [Function: once],
                                    destroy: [Function: destroy],
                                        removeListener: [Function: off],
                                            removeAllListeners: [Function: destroy],
                                                addListener: [Function: on]
        },
        logger: <ref * 1 > DerivedLogger {
            _readableState: [ReadableState],
                readable: true,
                    _events: [Object: null prototype],
                        _eventsCount: 3,
                            _maxListeners: undefined,
                                _writableState: [WritableState],
                                    writable: true,
                                        allowHalfOpen: true,
                                            _transformState: [Object],
                                                silent: undefined,
                                                    format: [Format],
                                                        defaultMeta: null,
                                                            levels: [Object],
                                                                level: 'silly',
                                                                    exceptions: [ExceptionHandler],
                                                                        rejections: [RejectionHandler],
                                                                            profilers: { },
            exitOnError: true,
                [Symbol(kCapture)]: false
        },
        webhooksMap: Map(0) { },
        listeners: Map(0) { },
        fetch: [Function: fetch],
            config: { defaultHeaders: { }, populateRelations: false },
        queue: WorkerQueue {
            logger: [DerivedLogger],
                worker: [Function: bound executeListener] AsyncFunction,
                    concurrency: 5,
                        running: 0,
                            queue: []
        }
    },
    db: <ref * 2 > Database {
        metadata: Metadata(29)[Map] {
            'strapi::core-store' => [Object],
                'webhook' => [Object],
                    'admin::permission' => [Object],
                        'admin::user' => [Object],
                            'admin::role' => [Object],
                                'admin::api-token' => [Object],
                                    'admin::api-token-permission' => [Object],
                                        'admin::transfer-token' => [Object],
                                            'admin::transfer-token-permission' => [Object],
                                                'plugin::upload.file' => [Object],
                                                    'plugin::upload.folder' => [Object],
                                                        'plugin::i18n.locale' => [Object],
                                                            'plugin::users-permissions.permission' => [Object],
                                                                'plugin::users-permissions.role' => [Object],
                                                                    'plugin::users-permissions.user' => [Object],
                                                                        'api::audit-log.audit-log' => [Object],
                                                                            'api::demo.demo' => [Object],
                                                                                'api::school.school' => [Object],
                                                                                    'api::test.test' => [Object],
                                                                                        'api::todo.todo' => [Object],
                                                                                            'admin_permissions_role_links' => [Object],
                                                                                                'admin_users_roles_links' => [Object],
                                                                                                    'strapi_api_token_permissions_token_links' => [Object],
                                                                                                        'strapi_transfer_token_permissions_token_links' => [Object],
                                                                                                            'files_related_morphs' => [Object],
                                                                                                                'files_folder_links' => [Object],
                                                                                                                    'upload_folders_parent_links' => [Object],
                                                                                                                        'up_permissions_role_links' => [Object],
                                                                                                                            'up_users_role_links' => [Object]
        },
        config: { connection: [Object], settings: [Object], models: [Array] },
        dialect: MysqlDialect {
            db: [Circular * 2],
                schemaInspector: [MysqlSchemaInspector],
                    databaseInspector: [MysqlDatabaseInspector],
                        info: [Object],
                            client: 'mysql'
        },
        connection: [Function: knex] {
            with: [Function(anonymous)],
                withRecursive: [Function(anonymous)],
                    withMaterialized: [Function(anonymous)],
                        withNotMaterialized: [Function(anonymous)],
                            select: [Function(anonymous)],
                                as: [Function(anonymous)],
                                    columns: [Function(anonymous)],
                                        column: [Function(anonymous)],
                                            from: [Function(anonymous)],
                                                fromJS: [Function(anonymous)],
                                                    fromRaw: [Function(anonymous)],
                                                        into: [Function(anonymous)],
                                                            withSchema: [Function(anonymous)],
                                                                table: [Function(anonymous)],
                                                                    distinct: [Function(anonymous)],
                                                                        join: [Function(anonymous)],
                                                                            joinRaw: [Function(anonymous)],
                                                                                innerJoin: [Function(anonymous)],
                                                                                    leftJoin: [Function(anonymous)],
                                                                                        leftOuterJoin: [Function(anonymous)],
                                                                                            rightJoin: [Function(anonymous)],
                                                                                                rightOuterJoin: [Function(anonymous)],
                                                                                                    outerJoin: [Function(anonymous)],
                                                                                                        fullOuterJoin: [Function(anonymous)],
                                                                                                            crossJoin: [Function(anonymous)],
                                                                                                                where: [Function(anonymous)],
                                                                                                                    andWhere: [Function(anonymous)],
                                                                                                                        orWhere: [Function(anonymous)],
                                                                                                                            whereNot: [Function(anonymous)],
                                                                                                                                orWhereNot: [Function(anonymous)],
                                                                                                                                    whereLike: [Function(anonymous)],
                                                                                                                                        andWhereLike: [Function(anonymous)],
                                                                                                                                            orWhereLike: [Function(anonymous)],
                                                                                                                                                whereILike: [Function(anonymous)],
                                                                                                                                                    andWhereILike: [Function(anonymous)],
                                                                                                                                                        orWhereILike: [Function(anonymous)],
                                                                                                                                                            whereRaw: [Function(anonymous)],
                                                                                                                                                                whereWrapped: [Function(anonymous)],
                                                                                                                                                                    havingWrapped: [Function(anonymous)],
                                                                                                                                                                        orWhereRaw: [Function(anonymous)],
                                                                                                                                                                            whereExists: [Function(anonymous)],
                                                                                                                                                                                orWhereExists: [Function(anonymous)],
                                                                                                                                                                                    whereNotExists: [Function(anonymous)],
                                                                                                                                                                                        orWhereNotExists: [Function(anonymous)],
                                                                                                                                                                                            whereIn: [Function(anonymous)],
                                                                                                                                                                                                orWhereIn: [Function(anonymous)],
                                                                                                                                                                                                    whereNotIn: [Function(anonymous)],
                                                                                                                                                                                                        orWhereNotIn: [Function(anonymous)],
                                                                                                                                                                                                            whereNull: [Function(anonymous)],
                                                                                                                                                                                                                orWhereNull: [Function(anonymous)],
                                                                                                                                                                                                                    whereNotNull: [Function(anonymous)],
                                                                                                                                                                                                                        orWhereNotNull: [Function(anonymous)],
                                                                                                                                                                                                                            whereBetween: [Function(anonymous)],
                                                                                                                                                                                                                                whereNotBetween: [Function(anonymous)],
                                                                                                                                                                                                                                    andWhereBetween: [Function(anonymous)],
                                                                                                                                                                                                                                        andWhereNotBetween: [Function(anonymous)],
                                                                                                                                                                                                                                            orWhereBetween: [Function(anonymous)],
                                                                                                                                                                                                                                                orWhereNotBetween: [Function(anonymous)],
                                                                                                                                                                                                                                                    groupBy: [Function(anonymous)],
                                                                                                                                                                                                                                                        groupByRaw: [Function(anonymous)],
                                                                                                                                                                                                                                                            orderBy: [Function(anonymous)],
                                                                                                                                                                                                                                                                orderByRaw: [Function(anonymous)],
                                                                                                                                                                                                                                                                    union: [Function(anonymous)],
                                                                                                                                                                                                                                                                        unionAll: [Function(anonymous)],
                                                                                                                                                                                                                                                                            intersect: [Function(anonymous)],
                                                                                                                                                                                                                                                                                having: [Function(anonymous)],
                                                                                                                                                                                                                                                                                    havingRaw: [Function(anonymous)],
                                                                                                                                                                                                                                                                                        orHaving: [Function(anonymous)],
                                                                                                                                                                                                                                                                                            orHavingRaw: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                offset: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                    limit: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                        count: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                            countDistinct: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                min: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                    max: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                        sum: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                            sumDistinct: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                avg: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                    avgDistinct: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                        increment: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                            decrement: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                first: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                    debug: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                        pluck: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                            clearSelect: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                clearWhere: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                    clearGroup: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                        clearOrder: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                            clearHaving: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                insert: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                    update: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                        returning: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                            del: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                delete: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                    truncate: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                        transacting: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                            connection: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                jsonExtract: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                    jsonSet: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                        jsonInsert: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                            jsonRemove: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                whereJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                    orWhereJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                        andWhereJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                            whereNotJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                orWhereNotJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                    andWhereNotJsonObject: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                        whereJsonPath: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                            orWhereJsonPath: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                andWhereJsonPath: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    whereJsonSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        orWhereJsonSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            andWhereJsonSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                whereJsonNotSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    orWhereJsonNotSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        andWhereJsonNotSupersetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            whereJsonSubsetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                orWhereJsonSubsetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    andWhereJsonSubsetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        whereJsonNotSubsetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            orWhereJsonNotSubsetOf: [Function(anonymous)],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                andWhereJsonNotSubsetOf: [Function(anonymous)],
context: [Object],
events: [Object: null prototype] { },
            _eventsCount: 0,
                _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                        getMaxListeners: [Function: getMaxListeners],
                            emit: [Function: emit],
                                addListener: [Function: addListener],
                                    on: [Function: addListener],
                                        prependListener: [Function: prependListener],
                                            once: [Function: once],
                                                prependOnceListener: [Function: prependOnceListener],
                                                    removeListener: [Function: removeListener],
                                                        off: [Function: removeListener],
                                                            removeAllListeners: [Function: removeAllListeners],
                                                                listeners: [Function: listeners],
                                                                    rawListeners: [Function: rawListeners],
                                                                        listenerCount: [Function: listenerCount],
                                                                            eventNames: [Function: eventNames],
                                                                                _internalListeners: [Array],
                                                                                    getSchemaName: [Function: getSchemaName]
        },
        schema: {
            builder: [Object],
                schemaDiff: [Object],
                    schemaStorage: [Object],
                        drop: [AsyncFunction: drop],
                            create: [AsyncFunction: create],
                                reset: [AsyncFunction: reset],
                                    syncSchema: [AsyncFunction: syncSchema],
                                        sync: [AsyncFunction: sync]
        },
        migrations: {
            shouldRun: [AsyncFunction: shouldRun],
                up: [AsyncFunction: up],
                    down: [AsyncFunction: down]
        },
        lifecycles: {
            subscribe: [Function: subscribe],
                clear: [Function: clear],
                    createEvent: [Function: createEvent],
                        run: [AsyncFunction: run]
        },
        entityManager: {
            findOne: [AsyncFunction: findOne],
                findMany: [AsyncFunction: findMany],
                    count: [AsyncFunction: count],
                        create: [AsyncFunction: create],
                            createMany: [AsyncFunction: createMany],
                                update: [AsyncFunction: update],
                                    updateMany: [AsyncFunction: updateMany],
                                        clone: [AsyncFunction: clone],
                                            delete: [AsyncFunction: delete],
                                                deleteMany: [AsyncFunction: deleteMany],
                                                    attachRelations: [AsyncFunction: attachRelations],
                                                        updateRelations: [AsyncFunction: updateRelations],
                                                            deleteRelations: [AsyncFunction: deleteRelations],
                                                                cloneRelations: [AsyncFunction: cloneRelations],
                                                                    populate: [AsyncFunction: populate],
                                                                        load: [AsyncFunction: load],
                                                                            createQueryBuilder: [Function: createQueryBuilder],
                                                                                getRepository: [Function: getRepository],
                                                                                    clearRepositories: [Function: clearRepositories]
        }
    },
    store: [Function: store] {
        get: [AsyncFunction: get],
            set: [AsyncFunction: set],
                delete: [AsyncFunction: delete]
    },
    webhookStore: {
        allowedEvents: Map(8) {
            'ENTRY_CREATE' => 'entry.create',
                'ENTRY_UPDATE' => 'entry.update',
                    'ENTRY_DELETE' => 'entry.delete',
                        'ENTRY_PUBLISH' => 'entry.publish',
                            'ENTRY_UNPUBLISH' => 'entry.unpublish',
                                'MEDIA_CREATE' => 'media.create',
                                    'MEDIA_UPDATE' => 'media.update',
                                        'MEDIA_DELETE' => 'media.delete'
        },
        addAllowedEvent: [Function: addAllowedEvent],
            removeAllowedEvent: [Function: removeAllowedEvent],
                listAllowedEvents: [Function: listAllowedEvents],
                    getAllowedEvent: [Function: getAllowedEvent],
                        findWebhooks: [AsyncFunction: findWebhooks],
                            findWebhook: [AsyncFunction: findWebhook],
                                createWebhook: [AsyncFunction: createWebhook],
                                    updateWebhook: [AsyncFunction: updateWebhook],
                                        deleteWebhook: [AsyncFunction: deleteWebhook]
    },
    entityValidator: {
        validateEntityCreation: [AsyncFunction(anonymous)],
            validateEntityUpdate: [AsyncFunction(anonymous)]
    },
    entityService: {
        implementation: {
            uploadFiles: [AsyncFunction(anonymous)],
                wrapParams: [AsyncFunction: wrapParams],
                    wrapResult: [AsyncFunction: wrapResult],
                        emitEvent: [AsyncFunction(anonymous)],
                            findMany: [AsyncFunction: findMany],
                                findPage: [AsyncFunction(anonymous)],
                                    findWithRelationCountsPage: [AsyncFunction(anonymous)],
                                        findWithRelationCounts: [AsyncFunction(anonymous)],
                                            findOne: [AsyncFunction(anonymous)],
                                                count: [AsyncFunction(anonymous)],
                                                    create: [AsyncFunction: create],
                                                        update: [AsyncFunction: update],
                                                            delete: [AsyncFunction(anonymous)],
                                                                clone: [AsyncFunction(anonymous)],
                                                                    deleteMany: [AsyncFunction(anonymous)],
                                                                        load: [AsyncFunction(anonymous)],
                                                                            loadPages: [AsyncFunction(anonymous)]
        },
        decorate: [Function: decorate],
            uploadFiles: [Function(anonymous)],
                wrapParams: [Function(anonymous)],
                    wrapResult: [Function(anonymous)],
                        emitEvent: [Function(anonymous)],
                            findMany: [Function(anonymous)],
                                findPage: [Function(anonymous)],
                                    findWithRelationCountsPage: [Function(anonymous)],
                                        findWithRelationCounts: [Function(anonymous)],
                                            findOne: [Function(anonymous)],
                                                count: [Function(anonymous)],
                                                    create: [Function(anonymous)],
                                                        update: [Function(anonymous)],
                                                            delete: [Function(anonymous)],
                                                                clone: [Function(anonymous)],
                                                                    deleteMany: [Function(anonymous)],
                                                                        load: [Function(anonymous)],
                                                                            loadPages: [Function(anonymous)]
    }
}




{
    request: {
      method: 'GET',
      url: '/content-manager/collection-types/api::demo.demo?page=1&pageSize=10&sort=title:ASC',
      header: {
        host: 'localhost:8000',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
        accept: '*/*',
        'accept-language': 'en-US,en;q=0.5',
        'accept-encoding': 'gzip, deflate, br',
        authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzAyNTQyMzI3LCJleHAiOjE3MDUxMzQzMjd9.JELQ4pTUnhegZWOyGNSp8NI69KKy0vFTXQNCPgo3CgI',
        connection: 'keep-alive',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin'
      }
    },
    response: {
      status: 404,
      message: 'Not Found',
      header: [Object: null prototype] {
        'content-security-policy': "connect-src 'self' https:;img-src 'self' data: blob: https://market-assets.strapi.io;media-src 'self' data: blob:;default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'",
        'referrer-policy': 'no-referrer',
        'strict-transport-security': 'max-age=31536000; includeSubDomains',
        'x-content-type-options': 'nosniff',
        'x-dns-prefetch-control': 'off',
        'x-download-options': 'noopen',
        'x-frame-options': 'SAMEORIGIN',
        'x-permitted-cross-domain-policies': 'none',
        vary: 'Origin'
      }
    },
    app: { subdomainOffset: 2, proxy: false, env: 'development' },
    originalUrl: '/content-manager/collection-types/api::demo.demo?page=1&pageSize=10&sort=title:ASC',
    req: '<original node req>',
    res: '<original node res>',
    socket: '<original node socket>'
  }